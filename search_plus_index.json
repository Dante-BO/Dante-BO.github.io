{"./":{"url":"./","title":"Introduction","keywords":"","body":"写在前面 大家好啊，我是DanteSU，一个梦想是成为计算机科学家的初学者 本网站主要是用来记录我的一些学习经历和试错经验，当然还有一些有用的链接。 emmm 大概就是这样吧，有问题欢迎随时通过 Github 与我联系。 DanteSU            updated 2022-04-06 21:27:29 "},"part1/":{"url":"part1/","title":"服务器使用","keywords":"","body":"服务器使用中一些常见问题与常用操作码 Anaconda Terminal Pytorch Others DanteSU            updated 2022-04-06 21:32:52 "},"part1/1.html":{"url":"part1/1.html","title":"Anaconda","keywords":"","body":"Anaconda Author = DanteSU Conda环境配置 查看安装的软件包 conda list 查看虚拟环境 conda env list conda info -e 检查更新conda版本 conda update conda 安装与卸载包 conda install package_name=version_in_need conda uninstall package_name 创建与删除虚拟环境 conda create -n env_name (package_name=version_in_need) python=3.7 conda remove -n env_name --all 清理虚拟环境的垃圾 conda clean --all 删除包 conda remove --name env_name package_name conda使用 激活与退出虚拟环境 Linux: source activate env_name source deactivate env_name Windows: conda activate conda deactivate env_name pip使用 查看安装包信息（路径、依赖） pip show package_name DanteSU            updated 2022-04-06 09:54:27 "},"part1/2.html":{"url":"part1/2.html","title":"Terminal","keywords":"","body":"Terminal Author = DanteSU 查看CUDA版本 $ nvcc -V $ nvcc --version 查看Nvidia显卡状态 $ nvidia-smi 清屏幕 Windows $ cls Linux/Mac $ clear 查看显卡设备和显卡的驱动 $ ubuntu-drivers devices 查看是否安装显卡驱动 $ glxinfo | grep rendering 离线后台程序 $ apt install screen $ screen -S w1 新建一个w1工作窗口 $ screen -ls 查看当前所有的运行窗口 $ screen -d w1 将w1窗口离线 $ screen -r w1 接入窗口w1 $ ctrl+A+D 退出当前窗口，回到主界面 $ screen -X -S w1 quit 删除w1这个窗口 $ screen kill +编号/名称 删除窗口 下载 wget $ wget [option] [url] 基本操作构成 $ wget url 根据文件地址下载 $ wget -O new_name url 使用其它名称保存文件 $ wget -P new_path url 更改文件保存位置 $ wget -c url 中断后的继续下载 $ wget -t 40 url 增加尝试次数（默认20次） $ wget --ftp-user= --ftp-password= url 从FTP加密服务器下载内容 $ wget -U 'xxx' url 模拟浏览器下载 比如 xxx 是 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.43 Safari/537.36 $ wget -b url 后台下载 $ tail -f wget-log 查看后台下载日志 $ vim downloads.txt 下载多个文件 $ wget -i downloads.txt DanteSU            updated 2022-04-06 10:02:22 "},"part1/3.html":{"url":"part1/3.html","title":"Pytorch","keywords":"","body":"Pytorch Author = DanteSU For CUDA 11.1 conda install pytorch torchvision torchaudio cudatoolkit=11.1 -c pytorch -c conda-forge 清华源 https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/linux-64/ https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/linux-64/ 检验安装成功 $ python import torch torch.cuda.is_available() torch.cuda.get_device_name() torch.__version__ torch.cuda.device_count() DanteSU            updated 2022-04-06 16:25:51 "},"part1/4.html":{"url":"part1/4.html","title":"Others","keywords":"","body":"Others Author = DanteSU Colab防断 function ConnectButton(){ console.log(\"Connect pushed\"); document.querySelector(\"#connect\").click() } setInterval(ConnectButton,60000); cv2安装 $ pip install opencv-python Under building... DanteSU            updated 2022-04-06 11:19:40 "},"part2/":{"url":"part2/","title":"Gitbook","keywords":"","body":"Gitbook 安装 基本使用 部署到Github 相关链接 DanteSU            updated 2022-04-06 11:14:55 "},"part2/1.html":{"url":"part2/1.html","title":"安装","keywords":"","body":"安装 Author = DanteSU Nodejs 因为Gitbook依赖Nodejs，所以首先要安装Nodejs，而且因为gitbook后来很久未更新，所以对新版的nodejs兼容性不好，容易出bug，建议最多使用到第10版的nodejs Mac 从 https://nodejs.org/en/ 下载并安装 Nodejs ，安装完后可通过终端命令 node -v 检验是否安装成功。 后面可能报错，所以可以直接通过 brew 命令下载低版本的 nodejs： $ brew install node@10 $ echo 'export PATH=\"/usr/local/opt/node@10/bin:$PATH\"' >> ~/.zshrc $ source ~/.zshrc $ # 查看版本及是否安装成功 $ node -v $ npm -v Linux Under building... Windows Under building... 安装Gitbook $ npm install gitbook-cli -g # 查看版本号 $ gitbook -V DanteSU            updated 2022-04-06 11:30:58 "},"part2/2.html":{"url":"part2/2.html","title":"基本使用","keywords":"","body":"基本使用 Author = DanteSU 创建新的book $ gitbook init 生成与预览 生成 $ gitbook build 若只执行gitbook build，会生成_book目录，但不能预览。 在这个目录中，对于每一个 markdown 文件都生成了一个相应的 html 文件，同时在 _book/gitbook 文件夹中存放了一些主题、字体、样式与图像等文件 预览 $ gitbook serve ./{book_name} 最后一个参数指定输出静态网站内容的目录，可省略，默认会在当前目录下新建一个子目录_book (base) dantesu@DanteSudeMacBook-Pro gitbook % gitbook serve Live reload server started on port: 35729 Press CTRL+C to quit ... info: 25 plugins are installed info: 14 explicitly listed info: loading plugin \"splitter\"... OK info: loading plugin \"expandable-chapters-small\"... OK info: loading plugin \"anchors\"... OK info: loading plugin \"github\"... OK info: loading plugin \"github-buttons\"... OK info: loading plugin \"sharing-plus\"... OK info: loading plugin \"anchor-navigation-ex\"... OK info: loading plugin \"favicon\"... OK info: loading plugin \"livereload\"... OK info: loading plugin \"highlight\"... OK info: loading plugin \"search\"... OK info: loading plugin \"lunr\"... OK info: loading plugin \"fontsettings\"... OK info: loading plugin \"theme-default\"... OK info: found 10 pages info: found 2 asset files info: >> generation finished with success in 1.1s ! Starting server ... Serving book on http://localhost:4000 样式 $ gitbook install 更新样式中的插件后需要使用此命令来安装新的插件，否则会报错，比如： (base) dantesu@DanteSudeMBP gitbook % gitbook serve Live reload server started on port: 35729 Press CTRL+C to quit ... info: 25 plugins are installed info: 16 explicitly listed Error: Couldn't locate plugins \"page-footer-ex\", Run 'gitbook install' to install plugins from registry. 样式例子 以下是我暂时在使用的样式 { \"title\": \"DanteSU's House\", \"author\": \"DanteSU\", \"description\": \"All I know is here\", \"language\": \"zh-hans\", \"gitbook\": \"3.2.3\", \"styles\": { \"website\": \"./styles/website.css\" }, \"structure\": { \"readme\": \"README.md\" }, \"links\": { \"sidebar\": { \"但丁世界（在建）\": \"https://dante-su.github.io/\" } }, \"plugins\": [ \"-sharing\", \"splitter\", \"expandable-chapters-small\", \"anchors\", \"github\", \"github-buttons\", \"sharing-plus\", \"anchor-navigation-ex\", \"favicon\" ], \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/Dante-Su\" }, \"sharing\": { \"douban\": false, \"facebook\": false, \"google\": false, \"hatenaBookmark\": false, \"instapaper\": false, \"line\": false, \"linkedin\": false, \"messenger\": false, \"pocket\": false, \"qq\": false, \"qzone\": false, \"stumbleupon\": false, \"twitter\": false, \"viber\": false, \"vk\": false, \"weibo\": false, \"whatsapp\": false, \"all\": [ \"google\", \"facebook\", \"weibo\", \"twitter\", \"qq\", \"qzone\", \"linkedin\", \"pocket\" ] }, \"anchor-navigation-ex\": { \"showLevel\": false }, \"favicon\":{ \"shortcut\": \"./source/images/favicon.jpg\", \"bookmark\": \"./source/images/favicon.jpg\", \"appleTouch\": \"./source/images/apple-touch-icon.jpg\", \"appleTouchMore\": { \"120x120\": \"./source/images/apple-touch-icon.jpg\", \"180x180\": \"./source/images/apple-touch-icon.jpg\" } } } } 样式网站 https://www.npmjs.com/search?q=gitbook-plugin-theme&ranking=quality DanteSU            updated 2022-04-06 16:55:53 "},"part2/3.html":{"url":"part2/3.html","title":"部署到Github","keywords":"","body":"部署到Github Author = DanteSU 创建新的book DanteSU            updated 2022-04-06 11:10:42 "},"part2/4.html":{"url":"part2/4.html","title":"相关链接","keywords":"","body":"相关链接 Author = DanteSU Under building... DanteSU            updated 2022-04-06 11:19:34 "},"part3/":{"url":"part3/","title":"图像处理","keywords":"","body":"图像处理 图像缩放 图像修改格式 DanteSU            updated 2022-04-06 10:53:19 "},"part3/1.html":{"url":"part3/1.html","title":"图像缩放","keywords":"","body":"图像缩放 Author = DanteSU import cv2 import os import glob def img_resize(): # iterations path = input(r\"Input the path of image to be processed(eg: D:\\picture\\1.jpg):\") print('Path of image here is : ',path) path_rewrite = input(r\"Input the path of restoring the image(eg: D:\\picture):\") for i in glob.glob(path): print('I here is : ', i) im1 = cv2.imread(i) # print('The original image data are: ', im1) im2 = cv2.resize(im1,(256,256)) # (256,256)是缩放后的像素数 # print('The resized image data are: ', im2) cv2.imwrite(os.path.join(path_rewrite,'resized_' + os.path.basename(i)),im2) if __name__ == '__main__': img_resize() DanteSU            updated 2022-04-06 10:56:21 "},"part3/2.html":{"url":"part3/2.html","title":"图像修改格式","keywords":"","body":"图像修改格式 Author = DanteSU 一般情况 import cv2 import os import glob def change_img_format(): # iterations path = input(r\"Input the path of image to be processed(eg: D:\\picture\\1.jpg):\") print('Path of image here is : ',path) path_rewrite = input(r\"Input the path of restoring the image(eg: D:\\picture):\") img_format = input(r\"Input the format you want(eg: jpg):\") for i in glob.glob(path): print('I here is : ', i) im = cv2.imread(i) new_path = os.path.join(path_rewrite,'new_name'+'.'+img_format) cv2.imwrite(new_path,im) if __name__ == '__main__': change_img_format() 针对 ico （图标）文件 ''' 常用图标大小： [ (256, 256), (128, 128), (64, 64), (48, 48), (32, 32), (24, 24), (16, 16) ] ''' from PIL import Image def make_ico_file(src_image_file, dist_ico_file, size): size = [int(size), int(size)] image = Image.open(src_image_file) image_cropped = image.crop((0, 0, 256, 256)) image_cropped.save(dist_ico_file, sizes=size) if __name__ == '__main__': make_ico_file(input(r\"Input the path of the image(eg: D:\\picture\\1.jpg):\"), input(r'Input the name of icon(eg: favicon):'), input(r'Input the same of icon(eg: 256):')) DanteSU            updated 2022-04-06 21:17:11 "},"part4/":{"url":"part4/","title":"姿态迁移","keywords":"","body":"姿态迁移 第一节 DanteSU            updated 2022-04-06 11:07:42 "},"part5/":{"url":"part5/","title":"流量分类","keywords":"","body":"流量分类 相关论文 开题报告 数据集 DanteSU            updated 2022-04-06 10:18:40 "},"part5/1.html":{"url":"part5/1.html","title":"相关论文","keywords":"","body":"相关论文 Author = DanteSU Deep packet: a novel approach for encrypted traffic classification using deep learning Deep packet Mobile Encrypted Traffic Classification Using Deep Learning: Experimental Evaluation, Lessons Learned, and Challenges DanteSU            updated 2022-04-06 10:23:08 "},"part5/2.html":{"url":"part5/2.html","title":"开题报告","keywords":"","body":"开题报告 Author = DanteSU ！！！本文禁止在取得作者同意之前以任何形式使用！！！ 一、课题来源、目的、意义 随着我国经济的高速发展，人民生活水平日益提高，对高速上网的需求也持续增加。经历了数次通信技术的更新迭代，时至今日，民用 5G 已经逐步在全国范围内铺设开来。伴随着网络技术的快速发展，同一时间段内产生的互联网流量明显增多。根据工信部发布的《2021 年 1~10 月通信业经济运行情况》显示，虽然互联网接入流量增速稍稍放缓，但在未来较长时期增长量仍将基本稳定，随宏观经济波动，疫情持续存在，月累计流量将持续增长。 流量的持续增加也会带来一些日常生活中出现问题的增加，比如互联网服务提供商 (ISP) 及其设备供应商面对的愈发困难的网络管理问题。网络运营商需要及时了解网络中的内容，以便他们能够快速做出反应以支持其各种业务目标。伴随着流量总量的增长和新类型流量的出现，曾经的网络流量分类算法难掩颓势，我们需要更准确、更快速、更易于实现、对新的流量类型也能做出处理的网络流量分类算法来帮助我们解决网络流量管理中的新的问题。 流量分类问题已经研究了二十年，相关研究结果得到了广泛的应用。目前流量分类技术的目的是要检测流量模式，从而优先客户自动分配网络资源，或识别客户使用网络资源是否在某种程度上违反了运营商的服务条款，当然，还有一些调整网络流量解包与调取的顺序以优化用户体验的作用。最近，政府还明确了互联网服务提供商在“合法拦截”违法 IP 数据流量方面的义务。正如电话公司必须支持拦截电话一样，互联网服务供应商越来越受政府要求提供特定个人在特定时间点的网络使用信息的要求。 目前流量分类有基于端口的数据包检测、对有效载荷的检测、对基于统计学的特征检测等方法。这些方法都已经在过去得到很好的应用，但由于通信技术的发展，互联网流量的巨大变化，特别是加密流量的增加，它们的准确性已经在下降。随着机器学习方法的普及，研究人员最近研究了这些方法用于流量分类任务并达到了很高的精度，实现了很好的效果。相比于传统流量分类技术，基于机器学习或者深度学习的技术具有操作简单，资源消耗少，实时性好等优点，可以广泛运用于互联网服务供应商的流量管理系统等地方。与此同时，近几年深度学习技术的快速发展，使得一些算法在很多任务的精度和速度上都达到了前所未有的水平，这使得在流量管理系统中应用一套端到端的方案成为可能。由此我想在基于深度学习技术的网络流量分类这一方面进行一定的研究，并考虑流量分类在一些特殊状态下如面对很多未曾见过的应用流量情况下的表现。 二、国内外研究现状 2.1 流量分类任务 2.1.1 传统的流量分类技术 基于端口的方法 通过端口号进行流量分类是这项任务最古老和最著名的方法。基于端口的分类器使用数据包的 TCP/UDP 标头中的信息来提取假定与特定应用程序相关联的端口号。提取端口号后，与分配的 IANA TCP/UDP 端口号进行比较，进行流量分类。提取过程简单，端口号不受加密方案的影响。由于提取过程快速，这种方法经常用于防火墙和访问控制列表。众所周知，基于端口的分类是网络流量识别最简单、最快的方法之一。然而，端口混淆、网络地址转换、端口转发、协议嵌入和随机端口分配的普遍性大大降低了这种方法的准确性。根据相关研究，目前只有 30% 到 70% 的互联网流量可以使用基于端口的分类方法进行分类。由于这些原因，需要更复杂的流量分类方法来对现代网络流量进行分类。 有效载荷检测技术 这些技术基于对数据包应用层有效载荷中可用信息的分析。大多数有效负载检测方法，也称为深度数据包检测，使用预定义的模式(如正则表达式)作为每个协议的签名。然后使用派生的模式来区分协议彼此。每当发布新协议时都需要更新模式，并且用户隐私问题是这种方法最重要的缺点之一。虽然有人提出了一种新的深度数据包检测系统，可以在不解密的情况下检查加密的有效负载，从而解决了用户隐私问题，但它只能处理 HTTP 安全流量。 统计和机器学习方法 其中一些方法，主要称为统计方法，有一个有偏见的假设，即每个应用程序的基础流量具有一些几乎独有的统计特征。每种统计方法都使用自己的函数和统计数据。有一种办法是基于数据包到达时间和归一化 阈值的概率密度函数的协议指纹。他们对 HTTP、POP3 和 SMTP 等一组协议的准确率高达 91%。在类似的工作中，还有人考虑了数据包大小的概率密度函数。他们的方案能够识别更广泛的协议，包括文件传输协议 (FTP)、互联网消息访问协议 (IMAP)、SSH 和 TELNET，准确率高达87%。 现如今，已经有了大量机器学习方法来对流量进行分类。比如有贝叶斯神经网络，该网络经过训练可以对包括 Kazaa、BitTorrent、GnuTella 在内的大多数知名 P2P 协议进行分类，并达到 99% 的准确率。使用朴素贝叶斯分类器和核密度估计器可以在同一组应用程序上实现 96% 的准确度。在流量分类问题上，人工神经网络方法可以胜过朴素贝叶斯方法。在“ISCX VPN-nonVPN”流量数据集上发表的两篇最重要的论文都是基于机器学习方法的。还有一些使用与时间相关的特征的研究，例如流的持续时间、每秒流字节数、前向和后向到达间隔时间等，使用 k-最近邻和 C4.5 决策树算法来分类网络流量。最终可以实现了大约 92% 的召回率，使用 C4.5 算法分类了六大类流量，包括网站浏览、电子邮件、聊天、流媒体、文件传输和 IP 语音。还在通过 VPN 隧道传输的同一数据集上使用 C4.5 算法实现了大约 88% 的召回率。还有一些研究手动选择 111 个流动特征并使用 k-最近邻算法在 14 类应用中实现了 94% 的准确率。所有这些方法的主要缺点是特征提取和特征选择阶段基本上是在专家的帮助下完成的。因此，这些方法耗时、昂贵且容易出现人为错误。此外，对于使用 k-最近邻分类器的情况，当用于预测时，该算法的执行时间是一个主要问题。 2.1.1 基于深度学习的流量分类技术 A. 多层感知机 多层感知机(MLP)是第一个神经网络架构，由一个输入层、一个输出层和几个隐藏层神经元组成。每层都有几个神经元，这些神经元与相邻层紧密相连，如图 1 所示。神经元对其输入进行加权求和，并通过非线性激活函数产生输出。从理论上讲，足够密集且足够深的多层感知机可以估计任意函数。然而，由于模型需要学习大量的参数，这个模型通常非常复杂、低效并且难以针对任意复杂问题进行训练。尽管单独使用深度多层感知机已经证明效果很差，但使用几层全连接的神经元的感知机仍然可以作为其他模型中间的组成部分使用。对于网络流量分类，单纯的多层感知机由于其复杂性和准确性低而很少使用。在 [1] 中，将许多深度学习方法与随机森林 (RF) 算法进行了比较，以显示性能差距。他们使用 3 个具有不同标签数量的移动数据集。许多深度学习方法在其中两个数据集中优于随机森林算法。然而，实验设置并不完全公平，因为用于 RF、MLP 和其他深度学习方法的输入特征不同。因此，不应将其结果视为对传统机器学习方法的全面比较。 图 1 多层感知机 B. 卷积神经网络 与多层感知机类似，卷积神经网络 (CNN) 也由几个具有可学习参数的层组成。多层感知机无法很好地处理导致隐藏层中有大量可学习参数的高维数据。卷积神经网络架构，如图 2 所示，通过使用卷积层解决了这个问题。在卷积层中，使用了一组具有少量可学习参数的小内核。同一组内核用于整合输入以产生下一层的输出。通过在层中使用相同的多个内核，可学习参数的数量显着减少。在整个输入上使用这些内核有助于模型更轻松地捕获移位不变特征。 池化层也用于一个或几个卷积层之后进行二次采样。此外，最后的隐藏层通常采用全连接层。[2] 中提出了最简单的卷积神经网络 (CNN) 模型，它基本上用一维向量表示每个流或会话，来输入到卷积神经网络模型。他们的卷积神经网络模型有 2 个卷积层、2 个池化层和 2 个全连接层。它们对每个数据包中的字节进行归一化，并且仅使用前 784 个字节。他们在 12 个类别的加密应用程序数据集上评估他们的模型，并表现出比使用时间序列和统计特征的 C4.5 方法有显着改进。在 [3] 中，作者还使用具有 2 个卷积层、2 个池化层和 3 个全连接层的卷积神经网络来执行协议和应用程序分类任务。他们使用再现内核希尔伯特空间 (RKHS) 嵌入并将早期时间序列数据转换为二维图像。他们的卷积神经网络模型在协议和应用分类任务中优于经典的机器学习方法和多层感知机。 [4] 中使用基于简单一维卷积神经网络的半监督方法对五个谷歌应用程序进行分类。他们训练了一个模型，从具有大量未标记数据集的几个采样数据包中预测整个流的统计特征。然后，他们将权重转移到一个新模型，并重新训练它以执行应用分类任务，只使用几个标记样本。他们展示了使用采样时间序列特征而不是前 n 个数据包的可能性，这对于高带宽操作网络可行性更高 [4]。 图 2 卷积神经网络 C. 循环神经网络 循环神经网络 (RNN) 是包含用于存储时间信息的循环的神经网络，如图3 所示。循环神经网络是专门为顺序数据设计的，其中输出可能不仅取决于最后一个输入，还取决于之前的输入。循环神经网络已成功应用于语音识别、时间序列预测、翻译和语言建模等一系列任务。梯度消失和爆炸使得学习长期的依赖关系变得困难(例如，相距很远的输入之间的依赖)，是传统循环神经网络中的一个常见障碍。长短期记忆 (LSTM) 通过添加一组控制何时存储或删除 信息的门来缓解这些问题。对于网络分类任务，研究发现混合模型优于纯长短期记忆模型或卷积神经网络模型 [5]。卷积神经网络和循环神经网络都在 [6]、[5] 中用于不同的应用来捕捉流的空间和时间特征。除了微小的差异之外，两项研究都将前 6 到 30 个数据包的内容带到卷积神经网络模型、循环神经网络或长短期记忆模型。尽管确切的输入特征、神经网络架构和数据集不同，但它们都达到了很高的精度。尽管它们在序列数据方面取得了成功，但长短期记忆并不适合需要显式和外部存储器的复杂任务。最近引入了新的架构，例如记忆网络和神经图灵机 (NTM)，以将显式记忆嵌入到架构中，称为记忆增强神经网络 (MANN)。记忆增强神经网络已成功应用于语言建模、问答和一次性学习。但尚未研究记忆增强神经网络在网络分类任务上的性能。 图 3 循环神经网络 D. 自编码器 (AE) 相对于上述模型，自编码器 (AE) 具有明显更小的隐藏层的神经网络，目的是在输出端重建输入，如图 4 所示。内部的编码表示可用于数据压缩或降维。多层感知机、卷积神经网络和循环神经网络都可以用作自编码器架构的一部分。自编码器广泛用于初始化深度架构的权重。自编码器有一些变体，例如去噪自编码器 (DAE) 通过输入带噪音的样本来输出完整的输入样本，从而迫使模型学习更稳健的特征，以及用于生成的变分自编码器 (VAE)可以产生模拟目标分布的虚假数据。更复杂的架构，称为堆叠式自动编码器 (SAE)，堆叠了多个自编码器，其中每个自编码器的输出都是下一个自编码器的输入，整个模型以贪婪的逐层方式进行训练。也可以训练一个混合学习框架，它将自编码器与多层感知机或其他模型相结合，从一开始就带有标记数据。因此，该模型同时学习输入和输出分布。这种混合模型使用多目标损失函数进行训练，包括标准输出损失以及重建损失。自编码器通常使用无监督的方式来获得输入数据的表示，这些表示以后可以用作分类器的一部分。例如，在 [7] 中，使用自编码器来重构输入。然后，将 softmax 层应用于自编码器的编码内部表示，最后达到了不错的精度。他们使用自己的私有数据集，包含 7 种流量类型。此外，他们使用 12 个区间和两个流向的 9 个统计特征作为输入。在 [8] 中，作者使用标头和有效负载数据在 ISCX VPN non-VPN 数据集上训练一维卷积神经网络和堆叠式自编码器模型。两种模型都显示出很高的准确性，但卷积神经网络模型的性能略优于堆叠式自编码器模型。 图 4 自编码器 E. 生成对抗网络 生成对抗网络 (GAN) 是一种无监督技术，可同时训练生成模型和判别模型。如图 5 所示，生成器旨在生成目标分布的数据，而判别器模型旨在区分真实数据和生成数据。这两种模型通常都是神经网络。首先训练生成器以通过判别器最大化错误概率。然后，固定生成器并训练鉴别器以最小化错误概率，同时输入真实和生成的数据。继续该过程直到收敛。尽管生成对抗网络难以训练和收敛，但它已被用于许多应用中，例如创建逼真的图像、从图像重建 3D 模型、提高图像质量、为数据稀缺的应用创建合成数据。生成模型可用于处理网络流量分类中的数据集不平衡问题。不平衡问题是指每个类别的样本数量变化很大的情况。在这种情况下，机器学习算法通常难以正确预测数据较少的类别。处理不平衡数据集最常见和最简单的方法是对数据较少的类别进行过采样，复制产生更多的样本，或对数据较多的类别进行欠采样，从其中删除一些样本。在 [9] 中，辅助分类的生成对抗网络(AC- GAN)可以生成用于监督网络分类任务的合成样本。 AC-GAN 和传统生成对抗网络的主要区别在于 AC-GAN 同时将随机噪声和类标签作为输入，从而生成输入类标签的样本。他们使用具有两个类(SSH 和非 SSH)的公共数据集、 22 个统计特征来作为输入。他们仅使用深度模型来生成合成数据。对于分类部分，他们使用经典的机器学习算法，包括支持向量机、随机森林和决策树。 图 5 生成对抗网络 F. 图神经网络 图神经网络(GNN)是一种直接作用于图结构上的神经网络。如图 6 所示，图神经网络的一个典型应用是节点分类，本质上，图中的每个节点都与一个标签相关联，我们希望预测未标记节点的标签。在节点分类问题中，每个节点都可以用其特征表示并且与已标记的标签相关联。给定部分标记的图，目标是利用这些标记的节点来预测未标记的节点标签。它通过学习得到每个节点的高维向量(状态)表示，同时包含其相邻节点的信息。Shen 等人 [10] 提出了一种称为“流量交互图(TIG)”的图结构，基于图神经网络分类器，识别去中心化应用程序(DApp)。该文采用图来表征流量交互特征，将流量按流划分，每条流包含一系列数据包，每个包以五元组(源/目的 IP，源/目的端口，协议)表示。从用户角度看，将上行流数据包长度设为负数，将下行流数据包长度设为正数。 图 6 图神经网络 2.2 基于深度学习的流量分类技术 基于深度学习的流量分类任务是指使用深度学习的经典技术来设计一个端到端的网络流量分类器，虽然没有专家设计的逐个分解步骤，但是在处理速度和准确度上都有更好的表现。之前的流量分类方法有的通过传输采取的端口号来分类，有的根据流量的有效载荷来推断内容，再讲他们分成不同的类，还有一些根据统计学模型来根据概率推断类别的，也是一些传统机器学习方法关注的点。 三、研究目标和方案 3.1 研究目标 针对流量分类的现行方法，阅读论文并加以实现，总结实验方法和实验手法，并在此基础上尝试发现问题提出更好的解决方案。 3.2 研究方案 3.2.1 流程设计 对于网络流量数据包的分类，我们需要训练出一个基于机器学习的模型来处理此问题。因为现阶段，深度学习发展如火如荼，有很多比较新的办法在很多问题上都有很好的效果，所以我们选取深度学习方法来解决此问题。对于深度学习中的模型训练而言，主要有两个最重要的关键，一个是模型的选择，另一个是数据的选取。流程设计如图 7 所示。首先我们将选取的数据集进行预处理来选择合适的特征，之后通过特征降维得到可以用来训练的样本数据，输入进入机器学习模型训练，经过一系列参数调整与训练，我们可以得到最终的一个分类器。将待分类样本输入进入训练完成的分类模型就可以得到分类的结果了。 图 7 流程图 3.2.2 模型选择 主要研究的算法是 RNN 与 Autoregressive Transformer，并在实际场景中加以实验检验。由于 RNN 有很多优化网络结构的变体，通过各种各样的处理减小计算开销，所以可实现性很高。而因为 Transformer 使用了自注意力机制，从而对全局信息的掌握度很好，而且训练可以并行化，效率高。 3.2.3 数据集设计 对于网络流量数据，以相关论文采用的开源数据集(比如 ISCX-VPN2016[11], ISCX2012[12], UNSW-NB15[13][14][15][16][17])为基础，根据直接搜集法与脚本生成法，以及其他类似数据集的收集办法，以多个数据集结合，交叉验证的办法(混合生成法)。 直接搜集法: 借助 Wireshark、Tcpdump、Sniffer 等抓包工具在真实环境中捕捉数据制作数据集。 脚本生成法:模拟攻击流量常利用脚本或虚拟网络产生，如模拟 APT 攻击、 IOT 攻击、内网渗透等攻击流量来组成数据集。 四、课题研究进度安排 表 1 课题研究进度安排表 阶段 任务名称 开始时间 完成时间 1 阅读文献，了解当前技术现状 2020/12/31 2021/03/10 2 学习相关知识 2021/03/10 2021/04/01 3 进行实验 2021/04/01 2021/05/01 4 撰写论文，准备答辩 2021/05/01 2021/05/31 五、主要参考文献 [1] Aceto G, D Ciuonzo, Montieri A, et al. Mobile Encrypted Traffic Classification Using Deep Learning[C]// IEEE/ACM Network Traffic Measurement and Analysis Conference (TMA'18). ACM, 2018. [2] Wei W, Ming Z, Wang J, et al. End-to-end encrypted traffic classification with one-dimensional convolution neural networks[C]// 2017 IEEE International Conference on Intelligence and Security Informatics (ISI). IEEE, 2017. [3] Chen Z, Ke H, Jian L, et al. Seq2Img: A sequence-to-image based approach towards IP traffic classification using convolutional neural networks[C]// 2017 IEEE International Conference on Big Data (Big Data). IEEE, 2017. [4] Rezaei S, Liu X. how to achieve high classification accuracy with just a few labels: a semi-supervised approach using sampled packets *[J]. 2019. [5] Lopez-Martin M, Carro B, Sanchez-Esguevillas A, et al. Network Traffic Classifier With Convolutional and Recurrent Neural Networks for Internet of Things[J]. IEEE Access, 2017, PP(99):1-1. [6] Wei W, Sheng Y, Wang J, et al. HAST-IDS: Learning Hierarchical Spatial- Temporal Features Using Deep Neural Networks to Improve Intrusion Detection[J]. IEEE Access, 2018, 6(99):1792-1806. [7] Hchst J, Baumgrtner L, Hollick M, et al. Unsupervised Traffic Flow Classification Using a Neural Autoencoder[C]// 2017 IEEE 42nd Conference on Local Computer Networks (LCN). IEEE, 2017. [8] LotfollahiMohammad, Siavoshanimahdi J, Zaderamin S H, et al. Deep packet: a novel approach for encrypted traffic classification using deep learning[J]. Soft Computing, 2019. [9] Vu L, Bui C T, Nguyen Q U. A Deep Learning Based Method for Handling Imbalanced Problem in Network Traffic Classification[C]// Eighth International Symposium on Information & Communication Technology. ACM, 2017:333-339. [10] Shen M, Zhang J, Zhu L, et al. Accurate Decentralized Application Identification via Encrypted Traffic Analysis Using Graph Neural Networks[J]. IEEE Transactions on Information Forensics and Security, 2021, PP(99):1-1. [11] Lashkari A H, Draper-Gil G, Mamun M, et al. Characterization of Encrypted and VPN Traffic Using Time-Related Features[C]// The International Conference on Information Systems Security and Privacy (ICISSP). 2016. [12] Shiravi A, Shiravi H, Tavallaee M, et al. Toward developing a systematic approach to generate benchmark datasets for intrusion detection[J]. Computers & Security, 2012, 31(3):357-374. [13] Moustafa N, Slay J. UNSW-NB15: a comprehensive data set for network intrusion detection systems (UNSW-NB15 network data set)[C]// Military Communications and Information Systems Conference (MilCIS), 2015. IEEE, 2015. [14] Moustafa N, Slay J. The evaluation of Network Anomaly Detection Systems: Statistical analysis of the UNSW-NB15 data set and the comparison with the KDD99 data set[J]. Information Security Journal A Global Perspective, 2016:1-14. [15] Moustafa N, et al. Novel Geometric Area Analysis Technique for Anomaly Detection Using Trapezoidal Area Estimation on Large-Scale Networks[J]. IEEE Transactions on Big Data, 2017. [16] Moustafa N, Creech G, Slay J. Big Data Analytics for Intrusion Detection System: Statistical Decision-Making Using Finite Dirichlet Mixture Models[J]. 2017. [17] Sarhan M, Layeghy S, Moustafa N, et al. NetFlow Datasets for Machine Learning-based Network Intrusion Detection Systems[J]. 2020. [18] Stber T, Frank M, Schmitt J, et al. Who do you sync you are?: smartphone fingerprinting via application behaviour[M]. 2013. [19] Aceto G, Ciuonzo D, Montieri A, et al. Traffic Classification of Mobile Apps through Multi-Classification[C]// IEEE Global Communications Conference (Globecom). IEEE, 2017. [20] Ran D, Dvir A, Pele O, et al. I Know What You Saw Last Minute - Encrypted HTTP Adaptive Video Streaming Title Classification[J]. IEEE Transactions on Information Forensics and Security, 2017, PP(12):3039-3049. [21] Taylor V F, Spolaor R, Conti M, et al. Robust Smartphone App Identification Via Encrypted Network Traffic Analysis[J]. IEEE Transactions on Information Forensics and Security, 2017, 13(1):63-78. [22] J. Zhang, et al. Robust network traffic classification, IEEE/ACM Transactions on Networking (TON), vol. 23, no. 4, 2015, pp. 1257-1270. [23] Woodward M, Finn C. Active One-shot Learning[J]. NIPS (2016) Deep Reinforcement Learning Workshop, 2018. [24] Rezaei S, Liu X. Deep Learning for Encrypted Traffic Classification: An Overview[J]. IEEE Communications Magazine, 2019, 57(5):76-81. [25] 冷涛.基于深度学习的加密流量分类研究综述[J].计算机与现代化,2021(08):112-120. [26] 张稣荣,卜佑军,陈博,孙重鑫,王涵,胡先君.基于多层双向 SRU 与注意力模型的加密流量分类方法 [J/OL]. 计算机工程 :1-15[2022-03- 22].DOI:10.19678/j.issn.1000-3428.0063626. [27] 皇甫雨婷,李丽颖,王海洲,沈富可,魏同权.自注意力的多特征网络流量异常检测与分类[J].华东师范大学学报(自然科学版),2021(06):161-173. DanteSU            updated 2022-04-06 21:32:27 "},"part5/3.html":{"url":"part5/3.html","title":"数据集","keywords":"","body":"数据集 Author = DanteSU DanteSU            updated 2022-04-06 10:12:54 "},"part6/":{"url":"part6/","title":"常用链接","keywords":"","body":"常用链接 常用网站官网 机器学习 bug经验集 岗位资源 DanteSU            updated 2022-04-06 17:55:31 "},"part6/1.html":{"url":"part6/1.html","title":"常用网站官网","keywords":"","body":"常用网站官网 DanteSU            updated 2022-04-06 17:56:44 "},"part6/2.html":{"url":"part6/2.html","title":"机器学习","keywords":"","body":"机器学习 DanteSU            updated 2022-04-06 17:57:01 "},"part6/3.html":{"url":"part6/3.html","title":"bug经验集","keywords":"","body":"bug经验集 DanteSU            updated 2022-04-06 17:57:11 "},"part6/4.html":{"url":"part6/4.html","title":"岗位资源","keywords":"","body":"岗位资源 DanteSU            updated 2022-04-06 17:56:53 "}}